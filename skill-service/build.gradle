plugins {
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group = 'ru.mentoring.rise'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

sourceSets {
    skillUnitTest {
        java.srcDir "src/test/unit/java"
        resources.srcDir "src/test/unit/resources"
        compileClasspath += sourceSets.main.output + test.output
        runtimeClasspath += sourceSets.main.output + test.output
    }

    skillIntegrationTest {
        java.srcDir "src/test/integration/java"
        resources.srcDir "src/test/integration/resources"
        compileClasspath += sourceSets.main.output + test.output
        runtimeClasspath += sourceSets.main.output + test.output
    }
}

configurations {
    developmentOnly
    runtimeClasspath.extendsFrom developmentOnly
    compileOnly.extendsFrom annotationProcessor
    skillUnitTestImplementation.extendsFrom testImplementation
    skillUnitTestRuntimeOnly.extendsFrom testRuntimeOnly
    skillIntegrationTestImplementation.extendsFrom testImplementation
    skillIntegrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "Greenwich.SR3")
}

task skillUnitTest(type: Test) {
    description = 'Runs unit tests: '
    group = 'verification'
    testClassesDirs = sourceSets.skillUnitTest.output.classesDirs
    classpath = sourceSets.skillUnitTest.runtimeClasspath
    useJUnitPlatform()
}

task skillIntegrationTest(type: Test) {
    description = "Runs integration tests: "
    group = 'verification'
    testClassesDirs = sourceSets.skillIntegrationTest.output.classesDirs
    classpath = sourceSets.skillIntegrationTest.runtimeClasspath
    useJUnitPlatform()
    mustRunAfter skillUnitTest
}

check.dependsOn skillIntegrationTest

task skillTest(type: Test) {
    dependsOn(skillUnitTest, skillIntegrationTest)
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation project(':common')

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.postgresql:postgresql'
    implementation 'org.mongodb:mongo-java-driver'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    skillUnitTestImplementation 'org.junit.jupiter:junit-jupiter:5.5.1'
    skillUnitTestRuntimeOnly 'org.junit.jupiter:junit-jupiter:5.5.1'
    skillUnitTestImplementation group: 'org.mockito', name: 'mockito-core', version: '2.19.0'
    skillUnitTestImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }

    skillIntegrationTestImplementation 'io.rest-assured:rest-assured:3.3.0'
    skillIntegrationTestImplementation 'org.junit.jupiter:junit-jupiter:5.5.1'
    skillIntegrationTestImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0'
    skillIntegrationTestImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
}
